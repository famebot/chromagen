{"version":3,"file":"chromagen.modern.js","sources":["../src/index.js"],"sourcesContent":["// Returns a random integer between min (included) and max (included)\n// Math.floor because Math.round() yields non-uniform distribution\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\nconst getRandomIntInclusive = (min, max) => {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport default () => {\n    // Seed the primary color\n    const hue = getRandomIntInclusive(1, 359);\n    // Comment out above line and uncomment below to test specific values\n    // var hue = 9; // 128 173 (test values)\n\n    // Set complement (secondary) and empty analogous (tertiary) values\n    var complement = hue > 180 ? hue - 180 : hue + 179;\n\n    var analogous;\n    switch (hue) {\n        case hue < 135:\n            analogous = hue + 224;\n            break;\n        case hue > 224:\n            analogous = hue - 223;\n            break;\n        default:\n            var shift = hue + 225;\n            analogous = shift > 359 ? shift - 359 : shift;\n    }\n\n    // Seed random saturation and lightness values within acceptable parameters\n    const saturation = getRandomIntInclusive(80, 100);\n    // very light or white text\n    const lightness = getRandomIntInclusive(64, 80);\n    // very dark or black text\n    const darkness = getRandomIntInclusive(0, 24);\n    // mid value used for lightness and saturation\n    const midrange = getRandomIntInclusive(48, 64);\n    // highlight\n    const xlight = getRandomIntInclusive(84, 92);\n    // dark highlight\n    const lowmid = getRandomIntInclusive(28, 36);\n\n    // Derive other mixing values\n    // typically a more extreme lightness/darkness unless the value is already\n    // extreme then a moderate value to contrast well with the extreme value\n    let lighter = lightness > 76 ? 68 : 84;\n    let darker = darkness < 8 ? 16 : 0;\n\n    return {\n        // raw mixing values\n        hue: hue,\n        complement: complement,\n        analogous: analogous,\n        saturation: saturation,\n        xlight: xlight,\n        lighter: lighter,\n        lightness: lightness,\n        midrange: midrange,\n        lowmid: lowmid,\n        darkness: darkness,\n        darker: darker,\n        // colors\n        huehsl: `hsl(${hue}, ${saturation}%, ${lightness}%)`,\n        complementhsl: `hsl(${complement}, ${saturation}%, ${lightness}%)`,\n        analogoushsl: `hsl(${analogous}, ${saturation}%, ${lightness}%)`,\n        // hue variations by lightness\n        huehslxlight: `hsl(${hue}, ${saturation}%, ${xlight}%)`,\n        huehsllighter: `hsl(${hue}, ${saturation}%, ${lighter}%)`,\n        huehslmid: `hsl(${hue}, ${saturation}%, ${midrange}%)`,\n        huehsllowmid: `hsl(${hue}, ${saturation}%, ${lowmid}%)`,\n        huehsldark: `hsl(${hue}, ${saturation}%, ${darkness}%)`,\n        huehsldarker: `hsl(${hue}, ${saturation}%, ${darker}%)`,\n        // complement variations by lightness\n        complementhslxlight: `hsl(${complement}, ${saturation}%, ${xlight}%)`,\n        complementhsllighter: `hsl(${complement}, ${saturation}%, ${lighter}%)`,\n        complementhslmid: `hsl(${complement}, ${saturation}%, ${midrange}%)`,\n        complementhsllowmid: `hsl(${complement}, ${saturation}%, ${lowmid}%)`,\n        complementhsldark: `hsl(${complement}, ${saturation}%, ${darkness}%)`,\n        complementhsldarker: `hsl(${complement}, ${saturation}%, ${darker}%)`,\n        // analogous variations by lightness\n        analogoushslxlight: `hsl(${analogous}, ${saturation}%, ${xlight}%)`,\n        analogoushsllighter: `hsl(${analogous}, ${saturation}%, ${lighter}%)`,\n        analogoushslmid: `hsl(${analogous}, ${saturation}%, ${midrange}%)`,\n        analogoushsllowmid: `hsl(${analogous}, ${saturation}%, ${lowmid}%)`,\n        analogoushsldark: `hsl(${analogous}, ${saturation}%, ${darkness}%)`,\n        analogoushsldarker: `hsl(${analogous}, ${saturation}%, ${darker}%)`\n    };\n};\n"],"names":["getRandomIntInclusive","min","max","Math","floor","random","index","hue","analogous","complement","shift","saturation","lightness","darkness","midrange","xlight","lowmid","lighter","darker","huehsl","complementhsl","analogoushsl","huehslxlight","huehsllighter","huehslmid","huehsllowmid","huehsldark","huehsldarker","complementhslxlight","complementhsllighter","complementhslmid","complementhsllowmid","complementhsldark","complementhsldarker","analogoushslxlight","analogoushsllighter","analogoushslmid","analogoushsllowmid","analogoushsldark","analogoushsldarker"],"mappings":"AAGA,MAAMA,EAAwBA,CAACC,EAAKC,IAC5BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGtD,IAAAK,EAAA,KAEI,MAAMC,EAAMP,EAAsB,EAAG,KAKrC,IAEIQ,EAFAC,EAAaF,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAG/C,OAAQA,GACJ,KAAKA,EAAM,IACPC,EAAYD,EAAM,IAClB,MACJ,KAAKA,EAAM,IACPC,EAAYD,EAAM,IAClB,MACJ,QACI,IAAIG,EAAQH,EAAM,IAClBC,EAAYE,EAAQ,IAAMA,EAAQ,IAAMA,EAIhD,MAAMC,EAAaX,EAAsB,GAAI,KAEvCY,EAAYZ,EAAsB,GAAI,IAEtCa,EAAWb,EAAsB,EAAG,IAEpCc,EAAWd,EAAsB,GAAI,IAErCe,EAASf,EAAsB,GAAI,IAEnCgB,EAAShB,EAAsB,GAAI,IAKzC,IAAIiB,EAAUL,EAAY,GAAK,GAAK,GAChCM,EAASL,EAAW,EAAI,GAAK,EAEjC,MAAO,CAEHN,IAAKA,EACLE,WAAYA,EACZD,UAAWA,EACXG,WAAYA,EACZI,OAAQA,EACRE,QAASA,EACTL,UAAWA,EACXE,SAAUA,EACVE,OAAQA,EACRH,SAAUA,EACVK,OAAQA,EAERC,OAAS,OAAMZ,MAAQI,OAAgBC,MACvCQ,cAAgB,OAAMX,MAAeE,OAAgBC,MACrDS,aAAe,OAAMb,MAAcG,OAAgBC,MAEnDU,aAAe,OAAMf,MAAQI,OAAgBI,MAC7CQ,cAAgB,OAAMhB,MAAQI,OAAgBM,MAC9CO,UAAY,OAAMjB,MAAQI,OAAgBG,MAC1CW,aAAe,OAAMlB,MAAQI,OAAgBK,MAC7CU,WAAa,OAAMnB,MAAQI,OAAgBE,MAC3Cc,aAAe,OAAMpB,MAAQI,OAAgBO,MAE7CU,oBAAsB,OAAMnB,MAAeE,OAAgBI,MAC3Dc,qBAAuB,OAAMpB,MAAeE,OAAgBM,MAC5Da,iBAAmB,OAAMrB,MAAeE,OAAgBG,MACxDiB,oBAAsB,OAAMtB,MAAeE,OAAgBK,MAC3DgB,kBAAoB,OAAMvB,MAAeE,OAAgBE,MACzDoB,oBAAsB,OAAMxB,MAAeE,OAAgBO,MAE3DgB,mBAAqB,OAAM1B,MAAcG,OAAgBI,MACzDoB,oBAAsB,OAAM3B,MAAcG,OAAgBM,MAC1DmB,gBAAkB,OAAM5B,MAAcG,OAAgBG,MACtDuB,mBAAqB,OAAM7B,MAAcG,OAAgBK,MACzDsB,iBAAmB,OAAM9B,MAAcG,OAAgBE,MACvD0B,mBAAqB,OAAM/B,MAAcG,OAAgBO,MAEhE"}